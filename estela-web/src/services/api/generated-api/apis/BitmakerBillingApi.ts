/* tslint:disable */
/* eslint-disable */
/**
 * estela API v1.0 Documentation
 * estela API Swagger Specification
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface BitmakerBillingCustomerReadRequest {
    id: number;
}

export interface BitmakerBillingCustomerUpdateRequest {
    id: number;
}

/**
 * 
 */
export class BitmakerBillingApi extends runtime.BaseAPI {

    /**
     */
    async bitmakerBillingCreditCardsListRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/bitmaker_billing/credit_cards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bitmakerBillingCreditCardsList(): Promise<void> {
        await this.bitmakerBillingCreditCardsListRaw();
    }

    /**
     */
    async bitmakerBillingCustomerCreateRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/bitmaker_billing/customer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bitmakerBillingCustomerCreate(): Promise<void> {
        await this.bitmakerBillingCustomerCreateRaw();
    }

    /**
     */
    async bitmakerBillingCustomerReadRaw(requestParameters: BitmakerBillingCustomerReadRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bitmakerBillingCustomerRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/bitmaker_billing/customer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bitmakerBillingCustomerRead(requestParameters: BitmakerBillingCustomerReadRequest): Promise<void> {
        await this.bitmakerBillingCustomerReadRaw(requestParameters);
    }

    /**
     */
    async bitmakerBillingCustomerUpdateRaw(requestParameters: BitmakerBillingCustomerUpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling bitmakerBillingCustomerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/bitmaker_billing/customer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bitmakerBillingCustomerUpdate(requestParameters: BitmakerBillingCustomerUpdateRequest): Promise<void> {
        await this.bitmakerBillingCustomerUpdateRaw(requestParameters);
    }

    /**
     */
    async bitmakerBillingSecretsListRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/bitmaker_billing/secrets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bitmakerBillingSecretsList(): Promise<void> {
        await this.bitmakerBillingSecretsListRaw();
    }

    /**
     */
    async bitmakerBillingSetDefaultPaymentCardCreateRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/bitmaker_billing/set_default_payment_card`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bitmakerBillingSetDefaultPaymentCardCreate(): Promise<void> {
        await this.bitmakerBillingSetDefaultPaymentCardCreateRaw();
    }

}
