/* tslint:disable */
/* eslint-disable */
/**
 * estela API v1.0 Documentation
 * estela API Swagger Specification
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GlobalStats,
    GlobalStatsFromJSON,
    GlobalStatsToJSON,
    SpidersJobsStats,
    SpidersJobsStatsFromJSON,
    SpidersJobsStatsToJSON,
} from '../models';

export interface ApiProjectsStatsListRequest {
    pid: string;
    startDate: string;
    endDate: string;
    page?: number;
    pageSize?: number;
}

export interface ApiProjectsStatsSpidersListRequest {
    pid: string;
    sid: string;
    startDate: string;
    endDate: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class StatsApi extends runtime.BaseAPI {

    /**
     * Retrieve stats of all jobs in a range of time, dates must have the format YYYY-mm-dd.
     */
    async apiProjectsStatsListRaw(requestParameters: ApiProjectsStatsListRequest): Promise<runtime.ApiResponse<Array<GlobalStats>>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsStatsList.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling apiProjectsStatsList.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling apiProjectsStatsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/stats`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GlobalStatsFromJSON));
    }

    /**
     * Retrieve stats of all jobs in a range of time, dates must have the format YYYY-mm-dd.
     */
    async apiProjectsStatsList(requestParameters: ApiProjectsStatsListRequest): Promise<Array<GlobalStats>> {
        const response = await this.apiProjectsStatsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve stats of all jobs of a spider in a range of time, dates must have the format YYYY-mm-dd.
     */
    async apiProjectsStatsSpidersListRaw(requestParameters: ApiProjectsStatsSpidersListRequest): Promise<runtime.ApiResponse<Array<SpidersJobsStats>>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsStatsSpidersList.');
        }

        if (requestParameters.sid === null || requestParameters.sid === undefined) {
            throw new runtime.RequiredError('sid','Required parameter requestParameters.sid was null or undefined when calling apiProjectsStatsSpidersList.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling apiProjectsStatsSpidersList.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling apiProjectsStatsSpidersList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/stats/spiders/{sid}`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))).replace(`{${"sid"}}`, encodeURIComponent(String(requestParameters.sid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpidersJobsStatsFromJSON));
    }

    /**
     * Retrieve stats of all jobs of a spider in a range of time, dates must have the format YYYY-mm-dd.
     */
    async apiProjectsStatsSpidersList(requestParameters: ApiProjectsStatsSpidersListRequest): Promise<Array<SpidersJobsStats>> {
        const response = await this.apiProjectsStatsSpidersListRaw(requestParameters);
        return await response.value();
    }

}
