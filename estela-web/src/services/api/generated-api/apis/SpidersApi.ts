/* tslint:disable */
/* eslint-disable */
/**
 * estela API v1.0 Documentation
 * estela API Swagger Specification
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    Spider,
    SpiderFromJSON,
    SpiderToJSON,
    SpiderUpdate,
    SpiderUpdateFromJSON,
    SpiderUpdateToJSON,
} from '../models';

export interface ApiProjectsSpidersListRequest {
    pid: string;
    page?: number;
    pageSize?: number;
}

export interface ApiProjectsSpidersPartialUpdateRequest {
    pid: string;
    sid: number;
    data: Spider;
}

export interface ApiProjectsSpidersReadRequest {
    pid: string;
    sid: number;
}

export interface ApiProjectsSpidersUpdateRequest {
    pid: string;
    sid: number;
    data: SpiderUpdate;
}

/**
 * 
 */
export class SpidersApi extends runtime.BaseAPI {

    /**
     */
    async apiProjectsSpidersListRaw(requestParameters: ApiProjectsSpidersListRequest): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsSpidersList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/spiders`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsSpidersList(requestParameters: ApiProjectsSpidersListRequest): Promise<InlineResponse2003> {
        const response = await this.apiProjectsSpidersListRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsSpidersPartialUpdateRaw(requestParameters: ApiProjectsSpidersPartialUpdateRequest): Promise<runtime.ApiResponse<Spider>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsSpidersPartialUpdate.');
        }

        if (requestParameters.sid === null || requestParameters.sid === undefined) {
            throw new runtime.RequiredError('sid','Required parameter requestParameters.sid was null or undefined when calling apiProjectsSpidersPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiProjectsSpidersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/spiders/{sid}`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))).replace(`{${"sid"}}`, encodeURIComponent(String(requestParameters.sid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SpiderToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpiderFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsSpidersPartialUpdate(requestParameters: ApiProjectsSpidersPartialUpdateRequest): Promise<Spider> {
        const response = await this.apiProjectsSpidersPartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsSpidersReadRaw(requestParameters: ApiProjectsSpidersReadRequest): Promise<runtime.ApiResponse<Spider>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsSpidersRead.');
        }

        if (requestParameters.sid === null || requestParameters.sid === undefined) {
            throw new runtime.RequiredError('sid','Required parameter requestParameters.sid was null or undefined when calling apiProjectsSpidersRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/spiders/{sid}`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))).replace(`{${"sid"}}`, encodeURIComponent(String(requestParameters.sid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpiderFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsSpidersRead(requestParameters: ApiProjectsSpidersReadRequest): Promise<Spider> {
        const response = await this.apiProjectsSpidersReadRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsSpidersUpdateRaw(requestParameters: ApiProjectsSpidersUpdateRequest): Promise<runtime.ApiResponse<SpiderUpdate>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsSpidersUpdate.');
        }

        if (requestParameters.sid === null || requestParameters.sid === undefined) {
            throw new runtime.RequiredError('sid','Required parameter requestParameters.sid was null or undefined when calling apiProjectsSpidersUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiProjectsSpidersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/spiders/{sid}`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))).replace(`{${"sid"}}`, encodeURIComponent(String(requestParameters.sid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SpiderUpdateToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpiderUpdateFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsSpidersUpdate(requestParameters: ApiProjectsSpidersUpdateRequest): Promise<SpiderUpdate> {
        const response = await this.apiProjectsSpidersUpdateRaw(requestParameters);
        return await response.value();
    }

}
