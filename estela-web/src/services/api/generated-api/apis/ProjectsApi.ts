/* tslint:disable */
/* eslint-disable */
/**
 * estela API v1.0 Documentation
 * estela API Swagger Specification
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    Project,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectCronJob,
    ProjectCronJobFromJSON,
    ProjectCronJobToJSON,
    ProjectJob,
    ProjectJobFromJSON,
    ProjectJobToJSON,
    ProjectUpdate,
    ProjectUpdateFromJSON,
    ProjectUpdateToJSON,
    ProjectUsage,
    ProjectUsageFromJSON,
    ProjectUsageToJSON,
    UsageRecord,
    UsageRecordFromJSON,
    UsageRecordToJSON,
} from '../models';

export interface ApiProjectsCreateRequest {
    data: Project;
}

export interface ApiProjectsCronjobsRequest {
    pid: string;
    page?: number;
    pageSize?: number;
}

export interface ApiProjectsCurrentUsageRequest {
    pid: string;
}

export interface ApiProjectsDeleteRequest {
    pid: string;
}

export interface ApiProjectsJobsRequest {
    pid: string;
    page?: number;
    pageSize?: number;
}

export interface ApiProjectsListRequest {
    page?: number;
    pageSize?: number;
}

export interface ApiProjectsPartialUpdateRequest {
    pid: string;
    data: Project;
}

export interface ApiProjectsReadRequest {
    pid: string;
}

export interface ApiProjectsUpdateRequest {
    pid: string;
    data: ProjectUpdate;
}

export interface ApiProjectsUsageRequest {
    pid: string;
    startDate?: string;
    endDate?: string;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     */
    async apiProjectsCreateRaw(requestParameters: ApiProjectsCreateRequest): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiProjectsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsCreate(requestParameters: ApiProjectsCreateRequest): Promise<Project> {
        const response = await this.apiProjectsCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsCronjobsRaw(requestParameters: ApiProjectsCronjobsRequest): Promise<runtime.ApiResponse<ProjectCronJob>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsCronjobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/cronjobs`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectCronJobFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsCronjobs(requestParameters: ApiProjectsCronjobsRequest): Promise<ProjectCronJob> {
        const response = await this.apiProjectsCronjobsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsCurrentUsageRaw(requestParameters: ApiProjectsCurrentUsageRequest): Promise<runtime.ApiResponse<ProjectUsage>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsCurrentUsage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/current_usage`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectUsageFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsCurrentUsage(requestParameters: ApiProjectsCurrentUsageRequest): Promise<ProjectUsage> {
        const response = await this.apiProjectsCurrentUsageRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsDeleteRaw(requestParameters: ApiProjectsDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProjectsDelete(requestParameters: ApiProjectsDeleteRequest): Promise<void> {
        await this.apiProjectsDeleteRaw(requestParameters);
    }

    /**
     */
    async apiProjectsJobsRaw(requestParameters: ApiProjectsJobsRequest): Promise<runtime.ApiResponse<ProjectJob>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/jobs`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectJobFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsJobs(requestParameters: ApiProjectsJobsRequest): Promise<ProjectJob> {
        const response = await this.apiProjectsJobsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsListRaw(requestParameters: ApiProjectsListRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsList(requestParameters: ApiProjectsListRequest): Promise<InlineResponse2001> {
        const response = await this.apiProjectsListRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsPartialUpdateRaw(requestParameters: ApiProjectsPartialUpdateRequest): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiProjectsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsPartialUpdate(requestParameters: ApiProjectsPartialUpdateRequest): Promise<Project> {
        const response = await this.apiProjectsPartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsReadRaw(requestParameters: ApiProjectsReadRequest): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsRead(requestParameters: ApiProjectsReadRequest): Promise<Project> {
        const response = await this.apiProjectsReadRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsUpdateRaw(requestParameters: ApiProjectsUpdateRequest): Promise<runtime.ApiResponse<ProjectUpdate>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiProjectsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpdateToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectUpdateFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectsUpdate(requestParameters: ApiProjectsUpdateRequest): Promise<ProjectUpdate> {
        const response = await this.apiProjectsUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiProjectsUsageRaw(requestParameters: ApiProjectsUsageRequest): Promise<runtime.ApiResponse<Array<UsageRecord>>> {
        if (requestParameters.pid === null || requestParameters.pid === undefined) {
            throw new runtime.RequiredError('pid','Required parameter requestParameters.pid was null or undefined when calling apiProjectsUsage.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/projects/{pid}/usage`.replace(`{${"pid"}}`, encodeURIComponent(String(requestParameters.pid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsageRecordFromJSON));
    }

    /**
     */
    async apiProjectsUsage(requestParameters: ApiProjectsUsageRequest): Promise<Array<UsageRecord>> {
        const response = await this.apiProjectsUsageRaw(requestParameters);
        return await response.value();
    }

}
