/* tslint:disable */
/* eslint-disable */
/**
 * estela API v1.0 Documentation
 * estela API Swagger Specification
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthToken,
    AuthTokenFromJSON,
    AuthTokenToJSON,
    ChangePassword,
    ChangePasswordFromJSON,
    ChangePasswordToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse401,
    InlineResponse401FromJSON,
    InlineResponse401ToJSON,
    ResetPasswordConfirm,
    ResetPasswordConfirmFromJSON,
    ResetPasswordConfirmToJSON,
    ResetPasswordRequest,
    ResetPasswordRequestFromJSON,
    ResetPasswordRequestToJSON,
    Token,
    TokenFromJSON,
    TokenToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserProfile,
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models';

export interface ApiAccountChangePasswordChangeRequest {
    data: ChangePassword;
}

export interface ApiAccountResetPasswordConfirmRequest {
    token: string;
    pair: string;
    data: ResetPasswordConfirm;
}

export interface ApiAccountResetPasswordRequestRequest {
    data: ResetPasswordRequest;
}

export interface ApiAccountResetPasswordValidateRequest {
    token: string;
    pair: string;
}

export interface ApiAuthLoginRequest {
    data: AuthToken;
}

export interface ApiAuthProfileCreateRequest {
    data: UserProfile;
}

export interface ApiAuthProfileDeleteRequest {
    username: string;
}

export interface ApiAuthProfilePartialUpdateRequest {
    username: string;
    data: UserProfile;
}

export interface ApiAuthProfileReadRequest {
    username: string;
}

export interface ApiAuthProfileUpdateRequest {
    username: string;
    data: UserProfile;
}

export interface ApiAuthRegisterRequest {
    data: User;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async apiAccountChangePasswordChangeRaw(requestParameters: ApiAccountChangePasswordChangeRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiAccountChangePasswordChange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/account/changePassword/change`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     */
    async apiAccountChangePasswordChange(requestParameters: ApiAccountChangePasswordChangeRequest): Promise<Token> {
        const response = await this.apiAccountChangePasswordChangeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAccountResetPasswordConfirmRaw(requestParameters: ApiAccountResetPasswordConfirmRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling apiAccountResetPasswordConfirm.');
        }

        if (requestParameters.pair === null || requestParameters.pair === undefined) {
            throw new runtime.RequiredError('pair','Required parameter requestParameters.pair was null or undefined when calling apiAccountResetPasswordConfirm.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiAccountResetPasswordConfirm.');
        }

        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        if (requestParameters.pair !== undefined) {
            queryParameters['pair'] = requestParameters.pair;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/account/resetPassword/confirm`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordConfirmToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     */
    async apiAccountResetPasswordConfirm(requestParameters: ApiAccountResetPasswordConfirmRequest): Promise<Token> {
        const response = await this.apiAccountResetPasswordConfirmRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAccountResetPasswordRequestRaw(requestParameters: ApiAccountResetPasswordRequestRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiAccountResetPasswordRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/account/resetPassword/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordRequestToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     */
    async apiAccountResetPasswordRequest(requestParameters: ApiAccountResetPasswordRequestRequest): Promise<Token> {
        const response = await this.apiAccountResetPasswordRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAccountResetPasswordValidateRaw(requestParameters: ApiAccountResetPasswordValidateRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling apiAccountResetPasswordValidate.');
        }

        if (requestParameters.pair === null || requestParameters.pair === undefined) {
            throw new runtime.RequiredError('pair','Required parameter requestParameters.pair was null or undefined when calling apiAccountResetPasswordValidate.');
        }

        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        if (requestParameters.pair !== undefined) {
            queryParameters['pair'] = requestParameters.pair;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/account/resetPassword/validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     */
    async apiAccountResetPasswordValidate(requestParameters: ApiAccountResetPasswordValidateRequest): Promise<InlineResponse200> {
        const response = await this.apiAccountResetPasswordValidateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAuthActivateRaw(): Promise<runtime.ApiResponse<Array<AuthToken>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/activate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuthTokenFromJSON));
    }

    /**
     */
    async apiAuthActivate(): Promise<Array<AuthToken>> {
        const response = await this.apiAuthActivateRaw();
        return await response.value();
    }

    /**
     */
    async apiAuthLoginRaw(requestParameters: ApiAuthLoginRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiAuthLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthTokenToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthLogin(requestParameters: ApiAuthLoginRequest): Promise<Token> {
        const response = await this.apiAuthLoginRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAuthProfileCreateRaw(requestParameters: ApiAuthProfileCreateRequest): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiAuthProfileCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthProfileCreate(requestParameters: ApiAuthProfileCreateRequest): Promise<UserProfile> {
        const response = await this.apiAuthProfileCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAuthProfileDeleteRaw(requestParameters: ApiAuthProfileDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling apiAuthProfileDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/profile/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthProfileDelete(requestParameters: ApiAuthProfileDeleteRequest): Promise<void> {
        await this.apiAuthProfileDeleteRaw(requestParameters);
    }

    /**
     */
    async apiAuthProfileListRaw(): Promise<runtime.ApiResponse<Array<UserProfile>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserProfileFromJSON));
    }

    /**
     */
    async apiAuthProfileList(): Promise<Array<UserProfile>> {
        const response = await this.apiAuthProfileListRaw();
        return await response.value();
    }

    /**
     */
    async apiAuthProfilePartialUpdateRaw(requestParameters: ApiAuthProfilePartialUpdateRequest): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling apiAuthProfilePartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiAuthProfilePartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/profile/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthProfilePartialUpdate(requestParameters: ApiAuthProfilePartialUpdateRequest): Promise<UserProfile> {
        const response = await this.apiAuthProfilePartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAuthProfileReadRaw(requestParameters: ApiAuthProfileReadRequest): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling apiAuthProfileRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/profile/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthProfileRead(requestParameters: ApiAuthProfileReadRequest): Promise<UserProfile> {
        const response = await this.apiAuthProfileReadRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAuthProfileUpdateRaw(requestParameters: ApiAuthProfileUpdateRequest): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling apiAuthProfileUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiAuthProfileUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/profile/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthProfileUpdate(requestParameters: ApiAuthProfileUpdateRequest): Promise<UserProfile> {
        const response = await this.apiAuthProfileUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAuthRegisterRaw(requestParameters: ApiAuthRegisterRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling apiAuthRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthRegister(requestParameters: ApiAuthRegisterRequest): Promise<Token> {
        const response = await this.apiAuthRegisterRaw(requestParameters);
        return await response.value();
    }

}
