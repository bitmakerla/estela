/* tslint:disable */
/* eslint-disable */
/**
 * estela API v1.0 Documentation
 * estela API Swagger Specification
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Permission,
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
} from './';

/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * A UUID identifying this project.
     * @type {string}
     * @memberof Project
     */
    readonly pid?: string;
    /**
     * Project's name.
     * @type {string}
     * @memberof Project
     */
    name: string;
    /**
     * Project's category.
     * @type {string}
     * @memberof Project
     */
    category?: ProjectCategoryEnum;
    /**
     * Path of the project's container image.
     * @type {string}
     * @memberof Project
     */
    readonly containerImage?: string;
    /**
     * Users with permissions on this project.
     * @type {Array<Permission>}
     * @memberof Project
     */
    users?: Array<Permission>;
    /**
     * Data status.
     * @type {string}
     * @memberof Project
     */
    dataStatus?: ProjectDataStatusEnum;
    /**
     * Days before data is deleted.
     * @type {number}
     * @memberof Project
     */
    dataExpiryDays?: number;
}

/**
* @export
* @enum {string}
*/
export enum ProjectCategoryEnum {
    NotEspecified = 'NOT ESPECIFIED',
    ECommerce = 'E-COMMERCE',
    Logistics = 'LOGISTICS',
    Finance = 'FINANCE',
    Educational = 'EDUCATIONAL',
    Technology = 'TECHNOLOGY',
    OtherCategory = 'OTHER_CATEGORY'
}/**
* @export
* @enum {string}
*/
export enum ProjectDataStatusEnum {
    Persistent = 'PERSISTENT',
    Pending = 'PENDING'
}

export function ProjectFromJSON(json: any): Project {
    return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Project {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pid': !exists(json, 'pid') ? undefined : json['pid'],
        'name': json['name'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'containerImage': !exists(json, 'container_image') ? undefined : json['container_image'],
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(PermissionFromJSON)),
        'dataStatus': !exists(json, 'data_status') ? undefined : json['data_status'],
        'dataExpiryDays': !exists(json, 'data_expiry_days') ? undefined : json['data_expiry_days'],
    };
}

export function ProjectToJSON(value?: Project | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'category': value.category,
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(PermissionToJSON)),
        'data_status': value.dataStatus,
        'data_expiry_days': value.dataExpiryDays,
    };
}


