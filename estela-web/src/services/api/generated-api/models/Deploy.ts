/* tslint:disable */
/* eslint-disable */
/**
 * estela API v1.0 Documentation
 * estela API Swagger Specification
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Spider,
    SpiderFromJSON,
    SpiderFromJSONTyped,
    SpiderToJSON,
    UserDetail,
    UserDetailFromJSON,
    UserDetailFromJSONTyped,
    UserDetailToJSON,
} from './';

/**
 * 
 * @export
 * @interface Deploy
 */
export interface Deploy {
    /**
     * A unique integer value identifying this deploy.
     * @type {number}
     * @memberof Deploy
     */
    readonly did?: number;
    /**
     * Project UUID.
     * @type {string}
     * @memberof Deploy
     */
    project: string;
    /**
     * 
     * @type {UserDetail}
     * @memberof Deploy
     */
    user: UserDetail;
    /**
     * Deploy status.
     * @type {string}
     * @memberof Deploy
     */
    status?: DeployStatusEnum;
    /**
     * Spiders in this deploy.
     * @type {Array<Spider>}
     * @memberof Deploy
     */
    spiders?: Array<Spider>;
    /**
     * Deploy creation date.
     * @type {Date}
     * @memberof Deploy
     */
    readonly created?: Date;
}

/**
* @export
* @enum {string}
*/
export enum DeployStatusEnum {
    Success = 'SUCCESS',
    Building = 'BUILDING',
    Failure = 'FAILURE',
    Canceled = 'CANCELED'
}

export function DeployFromJSON(json: any): Deploy {
    return DeployFromJSONTyped(json, false);
}

export function DeployFromJSONTyped(json: any, ignoreDiscriminator: boolean): Deploy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'did': !exists(json, 'did') ? undefined : json['did'],
        'project': json['project'],
        'user': UserDetailFromJSON(json['user']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'spiders': !exists(json, 'spiders') ? undefined : ((json['spiders'] as Array<any>).map(SpiderFromJSON)),
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
    };
}

export function DeployToJSON(value?: Deploy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'project': value.project,
        'user': UserDetailToJSON(value.user),
        'status': value.status,
        'spiders': value.spiders === undefined ? undefined : ((value.spiders as Array<any>).map(SpiderToJSON)),
    };
}


