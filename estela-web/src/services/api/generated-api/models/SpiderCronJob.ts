/* tslint:disable */
/* eslint-disable */
/**
 * estela API v1.0 Documentation
 * estela API Swagger Specification
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SpiderJobArg,
    SpiderJobArgFromJSON,
    SpiderJobArgFromJSONTyped,
    SpiderJobArgToJSON,
    SpiderJobEnvVar,
    SpiderJobEnvVarFromJSON,
    SpiderJobEnvVarFromJSONTyped,
    SpiderJobEnvVarToJSON,
    SpiderJobTag,
    SpiderJobTagFromJSON,
    SpiderJobTagFromJSONTyped,
    SpiderJobTagToJSON,
} from './';

/**
 * Project Cronjobs.
 * @export
 * @interface SpiderCronJob
 */
export interface SpiderCronJob {
    /**
     * A unique integer value identifying this cron job.
     * @type {number}
     * @memberof SpiderCronJob
     */
    readonly cjid?: number;
    /**
     * Spider sid.
     * @type {number}
     * @memberof SpiderCronJob
     */
    spider: number;
    /**
     * Cron job creation date.
     * @type {Date}
     * @memberof SpiderCronJob
     */
    readonly created?: Date;
    /**
     * Unique cron job name.
     * @type {string}
     * @memberof SpiderCronJob
     */
    readonly name?: string;
    /**
     * Cron job arguments.
     * @type {Array<SpiderJobArg>}
     * @memberof SpiderCronJob
     */
    cargs?: Array<SpiderJobArg>;
    /**
     * Cron job env variables.
     * @type {Array<SpiderJobEnvVar>}
     * @memberof SpiderCronJob
     */
    cenvVars?: Array<SpiderJobEnvVar>;
    /**
     * Cron job tags.
     * @type {Array<SpiderJobTag>}
     * @memberof SpiderCronJob
     */
    ctags?: Array<SpiderJobTag>;
    /**
     * Cron job schedule definition.
     * @type {string}
     * @memberof SpiderCronJob
     */
    schedule?: string;
    /**
     * Cron job status.
     * @type {string}
     * @memberof SpiderCronJob
     */
    status?: SpiderCronJobStatusEnum;
    /**
     * True if this cron job stores its items in a unique collection.
     * @type {boolean}
     * @memberof SpiderCronJob
     */
    uniqueCollection?: boolean;
    /**
     * Data status.
     * @type {string}
     * @memberof SpiderCronJob
     */
    dataStatus?: SpiderCronJobDataStatusEnum;
    /**
     * Days before data is deleted.
     * @type {number}
     * @memberof SpiderCronJob
     */
    dataExpiryDays?: number | null;
}

/**
* @export
* @enum {string}
*/
export enum SpiderCronJobStatusEnum {
    Active = 'ACTIVE',
    Disabled = 'DISABLED'
}/**
* @export
* @enum {string}
*/
export enum SpiderCronJobDataStatusEnum {
    Persistent = 'PERSISTENT',
    Pending = 'PENDING'
}

export function SpiderCronJobFromJSON(json: any): SpiderCronJob {
    return SpiderCronJobFromJSONTyped(json, false);
}

export function SpiderCronJobFromJSONTyped(json: any, ignoreDiscriminator: boolean): SpiderCronJob {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cjid': !exists(json, 'cjid') ? undefined : json['cjid'],
        'spider': json['spider'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'cargs': !exists(json, 'cargs') ? undefined : ((json['cargs'] as Array<any>).map(SpiderJobArgFromJSON)),
        'cenvVars': !exists(json, 'cenv_vars') ? undefined : ((json['cenv_vars'] as Array<any>).map(SpiderJobEnvVarFromJSON)),
        'ctags': !exists(json, 'ctags') ? undefined : ((json['ctags'] as Array<any>).map(SpiderJobTagFromJSON)),
        'schedule': !exists(json, 'schedule') ? undefined : json['schedule'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'uniqueCollection': !exists(json, 'unique_collection') ? undefined : json['unique_collection'],
        'dataStatus': !exists(json, 'data_status') ? undefined : json['data_status'],
        'dataExpiryDays': !exists(json, 'data_expiry_days') ? undefined : json['data_expiry_days'],
    };
}

export function SpiderCronJobToJSON(value?: SpiderCronJob | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'spider': value.spider,
        'cargs': value.cargs === undefined ? undefined : ((value.cargs as Array<any>).map(SpiderJobArgToJSON)),
        'cenv_vars': value.cenvVars === undefined ? undefined : ((value.cenvVars as Array<any>).map(SpiderJobEnvVarToJSON)),
        'ctags': value.ctags === undefined ? undefined : ((value.ctags as Array<any>).map(SpiderJobTagToJSON)),
        'schedule': value.schedule,
        'status': value.status,
        'unique_collection': value.uniqueCollection,
        'data_status': value.dataStatus,
        'data_expiry_days': value.dataExpiryDays,
    };
}


