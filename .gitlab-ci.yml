stages:
  - build
  - deploy

variables:
  DOCKER_REGISTRY: 094814489188.dkr.ecr.us-east-2.amazonaws.com
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

build-master:
  environment:
    name: scraping-product
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  stage: build
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - docker build . --tag $DOCKER_REGISTRY/bitmaker-consumer:$CI_COMMIT_SHORT_SHA
    - docker push $DOCKER_REGISTRY/bitmaker-consumer:$CI_COMMIT_SHORT_SHA
  only:
    refs:
      - master
    changes:
      - "consumer.py"

deploy-master:
  environment:
    name: scraping-product
  stage: deploy
  image:
    name: bitnami/kubectl
    entrypoint: [""]
  needs: [build-master]
  script:
    - kubectl apply -f kubernetes/prod/bitmaker-zookeepers.yaml --namespace=default
    - kubectl apply -f kubernetes/prod/bitmaker-kafka.yaml --namespace=default
    - kubectl wait --for=condition=available --timeout=300s --namespace=default statefulset/kafka
    - kubectl apply -f kubernetes/prod/bitmaker-kafka-consumers.yaml --namespace=default
    - kubectl set image deployment/kafka-items-consumer consumer=$DOCKER_REGISTRY/bitmaker-consumer:$CI_COMMIT_SHORT_SHA --namespace=default
    - kubectl set image deployment/kafka-requests-consumer consumer=$DOCKER_REGISTRY/bitmaker-consumer:$CI_COMMIT_SHORT_SHA --namespace=default
    - kubectl rollout status deployment/kafka-items-consumer --namespace=default
    - kubectl rollout status deployment/kafka-requests-consumer --namespace=default
    - kubectl wait --for=condition=available --timeout=300s --namespace=default deployment/kafka-items-consumer
    - kubectl wait --for=condition=available --timeout=300s --namespace=default deployment/kafka-requests-consumer
    - kubectl get pods -l app=kafka-consumer --namespace=default
  only:
    refs:
      - master
    changes:
      - "consumer.py"
